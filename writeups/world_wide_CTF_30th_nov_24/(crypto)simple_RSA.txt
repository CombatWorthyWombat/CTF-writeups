we are given the following:

message:
"RSA is so complicated! I made it simpler."

and two files:
chal.py
out.txt

===========================================================================

out.txt contains:
----------
p=20322136122026329892580404875086132520732558134579258531781672192065024437324055172065343417524169304918928056147680414370351055409439818026607876517460045945556933456319117456860928521423787112252544266864178773974904640732880445449138842965327995838722222110164109025916914430044528254715080648900354468118393295346137198518513075775514617222780524163798065365970392865107270392212968677531885628998155305428785133820145555740608026626724539584106018453003156159305252013173659975815845286802275956807162426425721298560633326719023970391963404981189820163950120529861779878077006530640930032570206978446007206971761
q=19097560527100693557502945814016176943507375936656621847599300620729196257594977906326233653252987169303598004653720974045696589437233399711658994040877123702369987961301047714594623670674571987772814959679153558360152976652255742578324469478560556855210734037861198243000935281050776548747455717266013266531885744852759548255091579407464355390341944708706006878618904548103612995804547530724085856234186750409404880456083750984829553552127853848824218180459231650990529456828407224866655873224370892839628814748212142246752082561042142636866939231370987974125358875253454199574864895153300338298982667319003886687691
c=4281681357519343869235268029657832985104802601857889851833662824770073601279722389949102805423012693423900316266993146428480448851806951090530135683459342224839031144425810971344588481297094697047852347659595441639804230546879345999083627138617034295731725402645279785129174304818023129638779656619113578465655082808462489379872294929944719545647280271454196700396004152529288987570497804498041888697213294509916951489315431831556860863264254674452235360890586742441263188663158067860877772336480637257856658858967478284817730555629113613134338975168062044831796369552664256963808360408525644200922627703094455580032
----------
chal.py contains:
----------
from secret import flag
from Crypto.Util.number import bytes_to_long, getPrime

flag = bytes_to_long(flag)
p = getPrime(2048)
q = getPrime(2048)
c = pow(flag, p, q)  # i believe this is the fancy rsa encryption?
print(f'{p=}')
print(f'{q=}')
print(f'{c=}')
----------

first impressions; the txt file outputs p and q
no sign of n, but we can generate it:

n = p.q
n = 388103224630377201193409640815102724893657282842857249500596784178325738453806797798285261452195323710184388845019269706348780617410938440499415595462256522246437678988729354067183603939504239304170178588777629797066271523140198740178307585654478198372913953127788301763022927993006438803026697064047909089161882261070107230722776587866511282833014935194001657367765769823028366216279627168358921353412451615262197447055449215695429282015646098140911499029730544474615761052228946901099642729764302473086792811558987699039049062801063225294126821698938637613639714131664617725126552135514279811407429966306447512957515841588993492855629827062673455197791110698985858151320662433832878540412644600026551196480836568803841031745996224648632219391605473230744130683467074616952060681475795334293921610881615013983006860863157103618779475494688542507093778310320983066493791659460167607316447030517209494862954799452711218968428327418825157302480312190070929738923076582275128860812951925640694707591089712980163917978207674637202168739812572401608953195894765341237438065999682179088457192338910445152156023622229181403310508486943197428082293885529311178579457107108405223317087731915871759962071074095076973688844889098193432863293851

there is no e value given, assume either
e = 3
e = 65537

calculate phi(n) -> (p-1)(q-1)
calculate decrypt exponent -> d = (e^-1) mod phi(n)

for e = 3:
d = invalid for modular

for e = 65537:
d = 306274481203876870600148819953862670381235958486804920684824833009122005387680757058295549644415977950883110405962305414386569186137240416927678642319795612769328933573677364893124018678719193014211475447960544966575682391706790647165446847162121518251502765488442912841322959745949616376302512251941556833275300801994062527515011098278348063488421798881526034414200800303297436140497215885993485412471406763961511661569201794201014801357511032695268349456316798597473984861379509357736430143898560501786408249096224801358020331705878953094998933296418929745637309842921744421102890731902025383618122136005663349293494103542276244815516489388286292430709025879894095689928012205052073499419885692005918295867507861914270404436159590219190994195196886916896566375327326426859979766184731702272682943823536504171581248503044503672179362012241251070628663890248339886769533122916836101990603196699748535875717233846117661183144893481455842801480006820526876812835261253811897881196379858237289407570665287468854343114121659913874050013061539718392366817663477146459272478553969839710624990596595394956623878240118602996489521830934290006528693585045618590188944650353390867885977916102412633508037852554322507921668449882969094488666273

decrypt using exponent:
m = (c^d) mod n
m = 45285906525695298996378298592858209981502065320282777789275915306900418268625742927510257638900442765433081405426395772702658257728068095688800200265728802300200695101145628046093006947365854340607839192934604902667024018149079615663624417233171121280030747590556930583714026070276975683062746916105881865199259971537803860722039195226500641656140040235658373489764654423967698340487845005593639666448764649789490884374160715114916469141163052936760327965571783565611044400134468254479778480170130101962800919966580046061158067431430876602405601026828154503695309490828831174743215178186601289874727021892539462588145253350561138478479155260831940035930524004914403885178472845375764055594839385496379050376117574646054255139252319953559175212915100069590459880293649544265912402589587929292230212570105146610904122966174852312684420654902304056379396463634366121471372443912323620574561502396982498772717966357446106898910184819046093985266657694784131742513310892096269887610785113971093447219596869537017140417179927150569923737109535777678739138661886309585439086367082489865808138690057299303722677957963174893593526518533171978678104574327278102989172124125241507262642849316279039234708989623076398875840946721853461234106096

decimal -> hex -> gibberish, i've done something wrong
lets take another look at the .py
the encryption step looks odd - should have seen it with the comment tbh...
usually you would do:

c = pow(flag, n)
instead we have:
c = pow(flag, p, q)

given we have p, q and c we ought to be able to use multiplicative modular inverse to find c
as: p^-1 mod(q-1) as both are prime:
flag = c^(p^-1 mod(q-1)) mod(q)

calculate p_inverse:
inverse(p, q -1)

therefore:
flag = pow(c, p_inverse, q)

flag = 11442608548816658811037175363949448637277166671534175613
decimal -> hex: 7777667B6A7535375F7535335F6C31627234723133357D
hex -> text: wwf{ju57_u53_l1br4r135}

CombatWorthyWombat
