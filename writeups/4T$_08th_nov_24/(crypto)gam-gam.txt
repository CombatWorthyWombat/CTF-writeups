this time we only get an output

we are given:

n = 24184405921426813952257404599844172064081900441874911388193652630310202789495631574938639097579036296101853234084915009375105829951961044132903535773924370570635332237832028283789889280165403481654234745557486403470274088268474644426048449169536944543970537467352336781804911800773427862282122961246703917704568734038884635778376198127691642199423912956685671445503565723497448770592525438558805325647407374824270703532081624469904632124745208505061145540656760946859657371270888296303072821867249045709759196878699068410554299707085233635566878012647656106156406503857113207
e = 65537
cf = 19949070990331976245949375301773799373206800804362632168364316553540430616830618653790469820828363016574115997704094863829732182137092831141159044101049172034884217341208278135632024598752036879352726375804431415940381410379858267677290511438684691665260067686568252722840144131544524130614320199820713749708063642505970041091970221332182634285081892576008284361856437472575724015987128320812953565466004548726671456646020677256311338766802480861734450302201585275812208617677229147872618475814224684268204020352159322992065216537963716573003898076957096748095052514990199352

cf (if notation is the same from previous) is something new we dont know about, previous notation was ct (ciphertext) for C

check value of n to see if has hits on factorDB -> no hits

575 digit n value. maybe check the "next" puzzle, as this one mentioned the previous one

prime factor decomposition check:

prime q comes out to be: 18063314945654761219 nice and short
therefore:
q = 18063314945654761219
p = 1338868640345803077023397047102661904121495187459760037702751056947618511879690334378617405704475201243753406612779662892929731669348209249403540051619126195970884138622502398973570829724745404221861615236567672314848744158217506454510574652234257029186905663032638877074047381220237780983373224592811607340228359583609494958016506686613961403150129518263799624079315277534930593371682529126293166826897323743768729923441744386367955170193181791709500936525272106956485809211658035889239497356129658261788806158312643458688407776802013547489464520358499453


hmm thats not right, p comes out as a non-prime

maybe as ct = ciphertext cf = cipher factor?

maybe instead of n = p*q, this is some wierd n = p*q*x*y*z and so on
try prime decomposition of n -> okay that worked

9308809837340399653
9638656009474996247
10172067034866822329
10354784369698224719
11209486700740045189
11346323158137382339
11354147304116634911
11764352138541927941
12173970345611589103
13161288593188783501
13232429251966529279
13688640699874074247
14198816595521136841
14476726661472037681
14731435635793702433
14861104142259777419
15169799324952462451
15238470019725544583
15415799843802438209
15511003127367003967
15745096712251841113
15878969227403060279
16576514605788751547
16630719954639992581
16671653695109508187
16728097962753531677
17996055586202421529
18063314945654761219
18185405107246550969
18362837959013960089

python script for multiple prime factor inverse modular
4T${sadly_this_is_too_much_prime_my_son}
